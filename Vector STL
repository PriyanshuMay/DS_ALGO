If you’ve already played with arrays in another language (or even in C/C++), you have a pretty good idea about STL Vector. 
It is a container that can store elements, but its size can change dynamically (C/C++ array’s size do not change dynamically).
Let’s start with the initialization. We can store int, string, float elements, depending on how we initialize the vector.
We’ll play with integer numbers first.
                            Let’s start with the initialization. We can store int, string, float elements, depending on how we 
                            initialize the vector. We’ll play with integer numbers first.
                          EX: vector<int> v;
                               v.push_back(2);
       If we use pop_back(), we’ll remove the last element.
                 v.pop_back();
       To remove the first element, we can use erase(). We need to pass the element’s position (iterator position), we want to 
       remove, as an argument.   v.erase(v.begin());
      Do you want the first element? Use front.  as v.front();
      Do you want the last element? Use back.   as v.back();
      Do you want to know the number of elements inside the vector? Use size. as v.size();
      Instead of using v.size()==0,use v.empty() for better performance.
      Let’s remove all elements from this vector by using v.clear();
      We can use algorithm's sort to order the vector elements in an ascending order. as #include <algorithm>
                                                                                         sort(v.begin(),v.end());
       Imagine that you don't want to write
       "sort(v.begin(), v.end(), greater<int>());"
      We can put this code into a void function, passing the vector as an argument. So now the question is:
      "How can we pass the vector as an argument?". And we have two ways:
               1)as a reference: 
                        void desc_sort(vector<int> &v) {
                                 sort(v.begin(), v.end(), greater<int>());
                                 }
                                      desc_sort(v);
               2)as a pointer:                                                
                       void desc_sort(vector<int> *v) {
                                   sort(v->begin(), v->end(), greater<int>());
                                } 
                                         desc_sort(&v);                                             
    There are many more such functions to play with given data using vector STL.
